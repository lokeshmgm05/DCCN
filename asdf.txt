en/decryption:

package dccn;

public class CustomEncyptionDecryption {

	public static void main(String[] args) {

		String value = "Encryption and decryption using 8 bit";
		int secret_key = 8;

		System.out.println("original_value"   + value);
		String encrypt = getEncryptedValue(value, secret_key);
		System.out.println("encrypted value "  + encrypt);

		String decrypt = getDecryptedValue(encrypt, secret_key);
		System.out.println("decrypted value "  + decrypt);
	}

	private static String getDecryptedValue(String encrypt, int secret_key) {
		String decrypted = "";
		for(int i =0; i<encrypt.length();i++) {
			char ch = encrypt.charAt(i);
			ch -= secret_key;
			decrypted = decrypted + ch;
		}
		return decrypted;
	}

	private static String getEncryptedValue(String value, int secret_key) {
		String encrypt = "";
		for (int i = 0; i<value.length(); i++) {
			char ch = value.charAt(i);
			ch += secret_key;
			encrypt = encrypt + ch;
		}
		return encrypt;
	}
}

FTP:
FTPServer:

package dccn;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

public class FTPServer {
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		 ServerSocket server=new ServerSocket(5000);
		 
		 System.out.println("Server started"); 
         System.out.println("Waiting for a client ..."); 
         
		 Socket socket = server.accept(); 
		 
		 System.out.println("Client has joined sharing ");
		 
         DataInputStream  readInput   = new DataInputStream(socket.getInputStream());
	     DataOutputStream writeOutput     = new DataOutputStream(socket.getOutputStream());
	     
	     Scanner ip = new Scanner(System.in);
	     
	     // get Stream socket input
	     String lines=readInput.readUTF();
	     
	     //write to files
	     FileWriter myWriter = new FileWriter("C:\\Users\\91822\\OneDrive\\Documents\\1.2 a.cpp");
	     myWriter.write(lines);
	     myWriter.close();
	     
	     server.close();
	     socket.close();
	     writeOutput.close();
	     readInput.close();
	     ip.close();
		
	}
}

FTPClient

package dccn;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.net.Socket;
import java.util.Scanner;

public class FTPClient {
	public static void main(String arg[]) throws Exception {
				
		System.out.println("Attempting to connect...");
		
		Socket socket=new Socket("localhost",5000);
		DataInputStream  readInput   = new DataInputStream(socket.getInputStream());
	    DataOutputStream writeOutput     = new DataOutputStream(socket.getOutputStream());
	    Scanner ip=new Scanner(System.in);
	    
	    System.out.println("Start transfering");
	    
	    String transfer="";
	    
	    // read file 
	    BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader("C:\\Users\\91822\\OneDrive\\Documents\\1.2 a.cpp"));
			String line = reader.readLine();
			while (line != null) {
				transfer=transfer+line+"\n";
				line = reader.readLine();
			}
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		//write to stream output
	    writeOutput.writeUTF(transfer);
	    
	    System.out.println("Transfer done!\nClosing connection"); 
	     
	     // close connection 
	     socket.close(); 
	     readInput.close();
	     writeOutput.close();
	     ip.close();
	     
	}
}

sliding window:
sender:

package dccn;
//sliding window
import java.net.*;
import java.io.*;
import java.rmi.*;
public class slidsender
{
public static void main(String a[])throws Exception
{
ServerSocket ser=new ServerSocket(10);
Socket s=ser.accept();
DataInputStream in=new DataInputStream(System.in);
DataInputStream in1=new DataInputStream(s.getInputStream());
String sbuff[]=new String[8];
PrintStream p;
int sptr=0,sws=8,nf,ano,i;
String ch;
do
{
p=new PrintStream(s.getOutputStream());
System.out.print("Enter the no. of frames : ");
nf=Integer.parseInt(in.readLine());
p.println(nf);
if(nf<=sws-1)
{

System.out.println("Enter "+nf+" Messages to be send\n");
for(i=1;i<=nf;i++)
{
sbuff[sptr]=in.readLine();
p.println(sbuff[sptr]);
sptr=++sptr%8;
}
sws-=nf;
System.out.print("Acknowledgment received");
ano=Integer.parseInt(in1.readLine());
System.out.println(" for "+ano+" frames");
sws+=nf;
}
else
{
System.out.println("The no. of frames exceeds window size");
break;
}
System.out.print("\nDo you wants to send some more frames : ");
ch=in.readLine(); p.println(ch);
}
while(ch.equals("yes"));
s.close();
}
}

receiver

package dccn;
//sliding window
import java.net.*;
import java.io.*;
class slidreceiver
{
public static void main(String a[])throws Exception
{
Socket s=new Socket(InetAddress.getLocalHost(),10);
 DataInputStream in=new DataInputStream(s.getInputStream());
PrintStream p=new PrintStream(s.getOutputStream());
int i=0,rptr=-1,nf,rws=8;
String rbuf[]=new String[8];
String ch; System.out.println();
do
{
nf=Integer.parseInt(in.readLine());
if(nf<=rws-1)
{
for(i=1;i<=nf;i++)
{
rptr=++rptr%8;
rbuf[rptr]=in.readLine();
System.out.println("The received Frame " +rptr+" is : "+rbuf[rptr]);
}
rws-=nf;
System.out.println("\nAcknowledgment sent\n");
p.println(rptr+1); rws+=nf; }
else
break;
ch=in.readLine();
}
while(ch.equals("yes"));
}
}

udp 
server

package dccn;
//udp
import java.io.*;
import java.net.*;

class UDPServer 
{
   public static void main(String args[]) throws Exception
   {

      DatagramSocket serverSocket =  new DatagramSocket(9876);

      byte[] receiveData = new byte[1024];
      byte[] sendData;

      while(true)
      {
         DatagramPacket receivePacket =
            new DatagramPacket(receiveData, receiveData.length);

         serverSocket.receive(receivePacket);

         String sentence = new String(receivePacket.getData(),
                                      0, receivePacket.getLength());

         InetAddress IPAddress = receivePacket.getAddress();

         int port = receivePacket.getPort();

         String capitalizedSentence = sentence.toUpperCase();

         sendData = capitalizedSentence.getBytes();

         DatagramPacket sendPacket =
            new DatagramPacket(sendData, sendData.length,
                               IPAddress, port);

         serverSocket.send(sendPacket);
      }
   }
}

client

package dccn;
//udp
import java.io.*;
import java.net.*;

class UDPClient 
{
   public static void main(String args[]) throws Exception
   {
      BufferedReader inFromUser =
         new BufferedReader(
         new InputStreamReader(System.in));

      DatagramSocket clientSocket = new DatagramSocket();

      // Replace hostname with the FQDN of the server.

      InetAddress IPAddress = InetAddress.getByName("localhost");

      byte[] sendData;

      byte[] receiveData = new byte[1024];

      String sentence = inFromUser.readLine();

      sendData = sentence.getBytes();

      DatagramPacket sendPacket =
         new DatagramPacket(sendData, sendData.length,
                            IPAddress, 9876);

      clientSocket.send(sendPacket);

      DatagramPacket receivePacket =
         new DatagramPacket(receiveData, receiveData.length);

      clientSocket.receive(receivePacket);

      String modifiedSentence = new String(receivePacket.getData(),
                                           0, receivePacket.getLength());

      System.out.println("FROM SERVER: " + modifiedSentence);

      clientSocket.close();
   }
}

tcp
server
package dccn;
//tcp
import java.net.*;
import java.io.*;

public class Server
{
	private Socket	socket = null;
	private ServerSocket server = null;
	private DataInputStream in	 = null;
	public Server(int port)
	{
		try
		{
			server = new ServerSocket(port);
			System.out.println("Server started");
			System.out.println("Waiting for a client ...");
			socket = server.accept();
			System.out.println("Client accepted");
			in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
			String line = "";
			while (!line.equals("Over"))
			{
				try
				{
					line = in.readUTF();
					System.out.println(line);

				}
				catch(IOException i)
				{
					System.out.println(i);
				}
			}
			System.out.println("Closing connection");
			socket.close();
			in.close();
		}
		catch(IOException i)
		{
			System.out.println(i);
		}
	}

	public static void main(String args[])
	{
		Server server = new Server(5000);
	}
}

client

package dccn;
//tcp
import java.net.*;
import java.io.*;

public class Client
{
	private Socket socket		 = null;
	private DataInputStream input = null;
	private DataOutputStream out	 = null;
	public Client(String address, int port)
	{
		try
		{
			socket = new Socket(address, port);
			System.out.println("Connected");
			input = new DataInputStream(System.in);
			out = new DataOutputStream(socket.getOutputStream());
		}
		catch(UnknownHostException u)
		{
			System.out.println(u);
		}
		catch(IOException i)
		{
			System.out.println(i);
		}
		String line = "";
		while (!line.equals("Over"))
		{
			try
			{
				line = input.readLine();
				out.writeUTF(line);
			}
			catch(IOException i)
			{
				System.out.println(i);
			}
		}
		try
		{
			input.close();
			out.close();
			socket.close();
		}
		catch(IOException i)
		{
			System.out.println(i);
		}
	}

	public static void main(String args[])
	{
		Client client = new Client("127.0.0.1", 5000);
	}
}

stop and wait
sender

package dccn;
//stop and wait
import java.io.*;
import java.net.*;
import java.util.Scanner;
public class sender {
    public static void main(String args[])
{
   int p=9000,i,q=8000;
    String h="localhost";
    try
    {
        Scanner scanner = new Scanner(System.in);
    System.out.print("Enter number of frames : ");
    int number = scanner.nextInt();
    if(number==0)
    {
        System.out.println("No frame is sent");
    }
    else
            {           
          Socket s2;
        s2= new Socket(h,q);
        DataOutputStream d1 = new DataOutputStream(s2.getOutputStream());
        d1.write(number);
          }
    String str1;
        for (i=0;i<number;i++)
        {                 
    System.out.print("Enter message : ");
    String name = scanner.next();
    System.out.println("Frame " + i+" is sent"); 
    Socket s1;
        s1= new Socket(h,p+i);
        DataOutputStream d = new DataOutputStream(s1.getOutputStream());
        d.writeUTF(name);
        DataInputStream dd= new DataInputStream(s1.getInputStream());
        Integer sss1 = dd.read();
        System.out.println("Ack for :" + sss1 + " is  received");
        }
    }
    catch(Exception ex)
            {
                System.out.println("ERROR :"+ex);
            }
} 
}

receiver

package dccn;
//stop and wait

	import java.io.*;
	import java.net.*;
	import java.util.*;
	/**
	 *
	 * @author StarkeeCode
	 */
	public class receiver {
	    public static void main(String args[])
	{
	    String h="Serverhost";
	    int q=5000;
	    int i;
	        try
	        {         
	        ServerSocket ss2;
	            ss2 = new ServerSocket(8000);
	            Socket s1 =ss2.accept();
	        DataInputStream dd1= new DataInputStream(s1.getInputStream());
	        Integer i1 =dd1.read();
	        for(i=0;i<i1;i++)
	        {
	            ServerSocket ss1;
	            ss1 = new ServerSocket(9000+i);
	            Socket s =ss1.accept();
	        DataInputStream dd= new DataInputStream(s.getInputStream());
	        String sss1 = dd.readUTF();
	            System.out.println(sss1);
	            System.out.println("Frame "+ i+" received");
	        DataOutputStream d1 = new DataOutputStream(s.getOutputStream());
	        d1.write(i);
	         System.out.println("ACK sent for "+ i); 
	        }
	        }
	        catch(Exception ex)
	        {
	         System.out.println("Error"+ex);
	                }
	}
	}



